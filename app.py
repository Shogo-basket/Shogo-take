# -*- coding: utf-8 -*-
"""mosaic art.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w0PqXF5sllidJeWknCZHHw7XQ-8WysEz
"""

import streamlit as st
from PIL import Image, ImageDraw, ImageFont
import numpy as np
import io
import pandas as pd
import zipfile

# --- 定数とヘルパー関数 ---
MM_PER_INCH = 25.4 # 1インチあたりのミリメートル数

def hex_to_rgb(hex_color):
    """16進数カラーコードをRGBタプルに変換します。"""
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

# --- モザイクアート生成ロジック (変更なし) ---
def generate_mosaic_art(original_image_pil, num_mosaics_horizontal, num_mosaics_vertical, sticker_colors_data):
    """
    モザイクアートを生成し、プレビュー画像と配置情報を返します。
    この関数では、元画像を単純に指定されたモザイク総数で割ったピクセルにリサイズします。
    最終的な印刷時のピクセルサイズはsplit_mosaic_into_sheetsで調整されます。

    Args:
        original_image_pil (PIL.Image.Image): 元画像オブジェクト。
        num_mosaics_horizontal (int): 横方向のモザイク総数。
        num_mosaics_vertical (int): 縦方向のモザイク総数。
        sticker_colors_data (list): 使用するシールの色データリスト [(RGBタプル, 色名), ...]。

    Returns:
        tuple: (PIL.Image.Image, list) -> モザイクプレビュー画像, 配置情報リスト
    """
    if not sticker_colors_data:
        st.warning("シール色が選択されていません。")
        return None, None

    sticker_rgb_only = [item[0] for item in sticker_colors_data]

    if original_image_pil.mode != 'RGB':
        original_image_pil = original_image_pil.convert("RGB")

    # 各モザイクのピクセルサイズを計算
    mosaic_width_px = original_image_pil.width // num_mosaics_horizontal
    mosaic_height_px = original_image_pil.height // num_mosaics_vertical

    # リサイズ後の画像サイズ (余りは切り捨て)
    resized_width = mosaic_width_px * num_mosaics_horizontal
    resized_height = mosaic_height_px * num_mosaics_vertical

    if resized_width == 0 or resized_height == 0:
        st.error("モザイクのピクセルサイズが小さすぎます。元画像またはモザイク数を調整してください。")
        return None, None

    resized_image = original_image_pil.resize((resized_width, resized_height), Image.LANCZOS)

    sticker_colors_np = np.array(sticker_rgb_only)

    mosaic_preview_image = Image.new("RGB", resized_image.size)
    pixels_preview = mosaic_preview_image.load()

    mosaic_placement_data = []
    mosaic_placement_data.append(["Row", "Column", "Assigned Color Index", "Assigned Color Name", "Assigned Color (RGB)"])

    progress_text = "モザイク生成中..."
    my_bar = st.progress(0, text=progress_text)

    total_cells = num_mosaics_horizontal * num_mosaics_vertical
    completed_cells = 0

    for r in range(num_mosaics_vertical):
        for c in range(num_mosaics_horizontal):
            left = c * mosaic_width_px
            top = r * mosaic_height_px
            right = left + mosaic_width_px
            bottom = top + mosaic_height_px

            mosaic_region = resized_image.crop((left, top, right, bottom))
            avg_color = np.array(mosaic_region).mean(axis=(0, 1))

            distances = np.sqrt(np.sum((sticker_colors_np - avg_color)**2, axis=1))
            closest_color_index = np.argmin(distances)

            assigned_rgb = sticker_colors_data[closest_color_index][0]
            assigned_name = sticker_colors_data[closest_color_index][1]

            for x in range(left, right):
                for y in range(top, bottom):
                    pixels_preview[x, y] = assigned_rgb

            mosaic_placement_data.append([r + 1, c + 1, closest_color_index + 1, assigned_name, assigned_rgb])

            completed_cells += 1
            my_bar.progress(completed_cells / total_cells, text=progress_text)

    my_bar.empty()

    return mosaic_preview_image, mosaic_placement_data

# --- シート分割ロジック (変更なし) ---
def split_mosaic_into_sheets(full_mosaic_image, full_placement_data,
                             num_sheets_horizontal, num_sheets_vertical,
                             sheet_width_mm, sheet_height_mm, target_dpi,
                             margin_top_mm, margin_bottom_mm, margin_left_mm, margin_right_mm):
    """
    生成されたモザイクアートを複数のシートに分割し、各マスに色情報を書き込みます。
    シートの物理サイズ、DPI、および余白を考慮して、各シートのピクセルサイズと描画領域を決定します。

    Args:
        full_mosaic_image (PIL.Image.Image): 全体のモザイクアート画像。
        full_placement_data (list): 全体のモザイク配置情報 (色インデックス、色名、RGBを含む)。
        num_sheets_horizontal (int): 横方向のシート分割数。
        num_sheets_vertical (int): 縦方向のシート分割数。
        sheet_width_mm (float): 1枚のシートの幅 (ミリメートル)。
        sheet_height_mm (float): 1枚のシートの高さ (ミリメートル)。
        target_dpi (int): 最終的な印刷時の目標DPI (Dots Per Inch)。
        margin_top_mm (float): 上余白 (mm)。
        margin_bottom_mm (float): 下余白 (mm)。
        margin_left_mm (float): 左余白 (mm)。
        margin_right_mm (float): 右余白 (mm)。

    Returns:
        list: 各シートの (画像, 配置データ) のタプルリスト。
    """
    sheet_data = []

    # 各シートの目標ピクセルサイズを計算
    sheet_pixel_width = int((sheet_width_mm / MM_PER_INCH) * target_dpi)
    sheet_pixel_height = int((sheet_height_mm / MM_PER_INCH) * target_dpi)

    if sheet_pixel_width <= 0 or sheet_pixel_height <= 0:
        st.error("指定されたシートサイズまたはDPIが小さすぎます。シートのピクセルサイズが0または負になります。")
        return []

    # 余白のピクセルサイズを計算
    margin_top_px = int((margin_top_mm / MM_PER_INCH) * target_dpi)
    margin_bottom_px = int((margin_bottom_mm / MM_PER_INCH) * target_dpi)
    margin_left_px = int((margin_left_mm / MM_PER_INCH) * target_dpi)
    margin_right_px = int((margin_right_mm / MM_PER_INCH) * target_dpi)

    # モザイクアートが実際に描画される領域のピクセルサイズ
    drawable_width_px = sheet_pixel_width - margin_left_px - margin_right_px
    drawable_height_px = sheet_pixel_height - margin_top_px - margin_bottom_px

    if drawable_width_px <= 0 or drawable_height_px <= 0:
        st.error("余白が大きすぎてモザイクアートを描画するスペースがありません。余白を減らすか、シートサイズを大きくしてください。")
        return []

    # 全体モザイクアートの目標ピクセルサイズ (描画可能領域の総和)
    total_mosaic_pixel_width = drawable_width_px * num_sheets_horizontal
    total_mosaic_pixel_height = drawable_height_px * num_sheets_vertical

    # full_mosaic_image を、この total_mosaic_pixel_width x total_mosaic_pixel_height にリサイズし直す
    resized_full_mosaic_image = full_mosaic_image.resize(
        (total_mosaic_pixel_width, total_mosaic_pixel_height), Image.LANCZOS
    )

    # ここで、session_stateから全体のモザイク総数を取得するのではなく、
    # 呼び出し元で計算された全体のモザイク総数を使用するように変更
    mosaic_grid_rows = st.session_state.total_vertical_mosaics # 新しく追加
    mosaic_grid_cols = st.session_state.total_horizontal_mosaics # 新しく追加

    # 各シートが含むモザイクのグリッド数を計算
    mosaics_per_sheet_horizontal = mosaic_grid_cols // num_sheets_horizontal
    mosaics_per_sheet_vertical = mosaic_grid_rows // num_sheets_vertical

    if mosaics_per_sheet_horizontal == 0 or mosaics_per_sheet_vertical == 0:
        st.error("シートあたりのモザイク数が少なすぎます。シート分割数を減らすか、モザイク数を増やしてください。")
        return []

    # 各モザイクマス目1つあたりのピクセルサイズ (シート内の描画可能領域でのサイズ)
    mosaic_cell_pixel_width_on_sheet = drawable_width_px // mosaics_per_sheet_horizontal
    mosaic_cell_pixel_height_on_sheet = drawable_height_px // mosaics_per_sheet_vertical

    if mosaic_cell_pixel_width_on_sheet <= 0 or mosaic_cell_pixel_height_on_sheet <= 0:
        st.error("個々のモザイクマス目が小さすぎます（余白が多すぎる可能性）。シートサイズを大きくするか、モザイク数を減らしてください。")
        return []

    # フォントの準備
    try:
        font_size = max(10, min(20, int(min(mosaic_cell_pixel_width_on_sheet, mosaic_cell_pixel_height_on_sheet) * 0.4)))
        font = ImageFont.truetype("arial.ttf", font_size)
    except IOError:
        font = ImageFont.load_default()
        font_size = 14

    sheet_count = 0
    for sheet_row in range(num_sheets_vertical):
        for sheet_col in range(num_sheets_horizontal):
            sheet_count += 1

            # 新しいシート画像を作成 (余白を含む全体のピクセルサイズで)
            sheet_image = Image.new("RGB", (sheet_pixel_width, sheet_pixel_height), (255, 255, 255)) # 余白は白で塗りつぶし
            draw = ImageDraw.Draw(sheet_image)

            # このシートに対応する、リサイズされた全体画像からの切り出し領域を決定
            left_crop_overall_image = sheet_col * drawable_width_px
            top_crop_overall_image = sheet_row * drawable_height_px
            right_crop_overall_image = left_crop_overall_image + drawable_width_px
            bottom_crop_overall_image = top_crop_overall_image + drawable_height_px

            # 全体画像からモザイクアート部分を切り出す
            mosaic_art_segment = resized_full_mosaic_image.crop(
                (left_crop_overall_image, top_crop_overall_image, right_crop_overall_image, bottom_crop_overall_image)
            )

            # 切り出したモザイクアート部分を、シート画像の余白内側に貼り付け
            sheet_image.paste(mosaic_art_segment, (margin_left_px, margin_top_px))

            # シート番号を画像に書き込む (位置を調整)
            text_sheet_num = f"Sheet {sheet_count}"
            text_bbox_sheet = draw.textbbox((0,0), text_sheet_num, font=font)
            text_width_sheet = text_bbox_sheet[2] - text_bbox_sheet[0]
            draw.text((sheet_image.width - text_width_sheet - 10, 5), text_sheet_num, font=font, fill=(0, 0, 0))

            # シートの配置データヘッダー
            sheet_placement_data = [full_placement_data[0]]

            # 全体配置データからこのシートの範囲内のモザイクを抽出
            for row_data in full_placement_data[1:]: # ヘッダー行をスキップ
                mosaic_overall_row = row_data[0] # 全体での行番号 (1-based)
                mosaic_overall_col = row_data[1] # 全体での列番号 (1-based)
                color_index = row_data[2]
                color_name = row_data[3]
                color_rgb = row_data[4]

                # このシートに含まれるモザイクかどうかを判定
                start_mosaic_overall_row_idx = sheet_row * mosaics_per_sheet_vertical + 1
                end_mosaic_overall_row_idx = start_mosaic_overall_row_idx + mosaics_per_sheet_vertical - 1
                start_mosaic_overall_col_idx = sheet_col * mosaics_per_sheet_horizontal + 1
                end_mosaic_overall_col_idx = start_mosaic_overall_col_idx + mosaics_per_sheet_horizontal - 1

                if (start_mosaic_overall_row_idx <= mosaic_overall_row <= end_mosaic_overall_row_idx and
                    start_mosaic_overall_col_idx <= mosaic_overall_col <= end_mosaic_overall_col_idx):

                    # シート内での相対的な行と列を計算 (1-based)
                    relative_row = mosaic_overall_row - start_mosaic_overall_row_idx + 1
                    relative_col = mosaic_overall_col - start_mosaic_overall_col_idx + 1

                    # シートの配置データに追加
                    sheet_placement_data.append([relative_row, relative_col, color_index, color_name, color_rgb])

                    # 各マス目にテキストを描画 (余白を考慮した位置)
                    cell_left_on_sheet_drawable = (relative_col - 1) * mosaic_cell_pixel_width_on_sheet
                    cell_top_on_sheet_drawable = (relative_row - 1) * mosaic_cell_pixel_height_on_sheet

                    # シート全体座標でのテキスト描画位置
                    text_x_on_sheet = margin_left_px + cell_left_on_sheet_drawable + mosaic_cell_pixel_width_on_sheet // 2
                    text_y_on_sheet = margin_top_px + cell_top_on_sheet_drawable + mosaic_cell_pixel_height_on_sheet // 2

                    # 表示するテキストを「行-列:色名」または「色名」に調整
                    text_to_draw = color_name # デフォルトは色名
                    # マス目が十分に広ければ行-列も表示
                    if mosaic_cell_pixel_width_on_sheet >= 80 and mosaic_cell_pixel_height_on_sheet >= 40: # 適当な閾値
                        text_to_draw = f"{relative_row}-{relative_col}:{color_name}"

                    # 文字色を背景色に応じて調整
                    avg_rgb = np.array(color_rgb).mean()
                    text_fill_color = (0, 0, 0) if avg_rgb > 128 else (255, 255, 255)

                    draw.text((text_x_on_sheet, text_y_on_sheet), text_to_draw, fill=text_fill_color, font=font, anchor="mm")

            sheet_data.append((sheet_image, sheet_placement_data, sheet_count))

    return sheet_data

# --- Streamlit アプリケーションのUI ---
st.set_page_config(
    page_title="モザイクアート計画ツール",
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title('🎨 モザイクアート計画ツール')
st.write('元画像をアップロードし、カスタムした色のシールを使ってモザイクアートの計画を立てます。')

with st.sidebar:
    st.header('設定')

    # 1. 写真アップロード
    st.subheader('元画像のアップロード')
    uploaded_file = st.file_uploader("画像をアップロードしてください", type=["jpg", "jpeg", "png"])

    # 2. 色の数と名前を選択
    st.subheader('使用するシールの色数と名前')
    num_colors = st.slider('色の数', min_value=2, max_value=10, value=3, step=1)

    sticker_colors_with_names = []
    default_colors_hex = [
        "#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF",
        "#00FFFF", "#FFA500", "#800080", "#008000", "#FFC0CB"
    ]
    default_names = ["赤", "緑", "青", "黄", "マゼンタ", "シアン", "オレンジ", "紫", "深緑", "ピンク"]

    for i in range(num_colors):
        col1, col2 = st.columns([0.6, 0.4])
        with col1:
            color_hex = st.color_picker(f'色 {i+1} を選んでください', default_colors_hex[i % len(default_colors_hex)], key=f'color_picker_{i}')
        with col2:
            color_name = st.text_input(f'色 {i+1} の名前', default_names[i % len(default_names)], key=f'color_name_{i}')

        sticker_colors_with_names.append((hex_to_rgb(color_hex), color_name))

    st.write("選択された色:")
    for i, (rgb, name) in enumerate(sticker_colors_with_names):
        st.write(f"- **{name}**: {rgb}")

    st.session_state['sticker_colors_data'] = sticker_colors_with_names

    # 3. シート分割設定
    st.subheader('シート分割設定')
    st.write('モザイクアート全体を何枚のシートに分割しますか？')
    num_sheets_horizontal = st.number_input('シートの横分割数', min_value=1, value=1, step=1)
    num_sheets_vertical = st.number_input('シートの縦分割数', min_value=1, value=1, step=1)

    # 4. 1枚あたりのモザイク数を指定 (新しい機能)
    st.subheader('1枚あたりのモザイク数')
    st.write('各シートに配置するモザイクの数を指定します。')
    mosaics_per_sheet_horizontal_input = st.number_input('1枚あたりの横方向のモザイク数', min_value=1, value=12, step=1, key='mosaics_per_sheet_horizontal_input')
    mosaics_per_sheet_vertical_input = st.number_input('1枚あたりの縦方向のモザイク数', min_value=1, value=8, step=1, key='mosaics_per_sheet_vertical_input')

    # 5. シート一枚のサイズを指定
    st.subheader('シート一枚の物理サイズ (印刷時)')
    st.write('各シートが印刷された時のサイズを指定します。')
    paper_sizes = {
        "カスタム": (0, 0),
        "A3 (297 x 420 mm)": (297, 420),
        "A4 (210 x 297 mm)": (210, 297),
        "レター (215.9 x 279.4 mm)": (215.9, 279.4)
    }
    selected_paper_size_name = st.selectbox("用紙サイズプリセット", list(paper_sizes.keys()))

    default_width_mm, default_height_mm = paper_sizes[selected_paper_size_name]

    sheet_width_mm = st.number_input(
        'シートの幅 (mm)',
        min_value=1.0,
        value=float(default_width_mm if default_width_mm != 0 else 297),
        step=1.0
    )
    sheet_height_mm = st.number_input(
        'シートの高さ (mm)',
        min_value=1.0,
        value=float(default_height_mm if default_height_mm != 0 else 420),
        step=1.0
    )

    st.subheader('印刷時の解像度 (DPI)')
    target_dpi = st.slider('印刷時のDPI (解像度)', min_value=72, max_value=600, value=300, step=10)

    # 6. 余白の指定
    st.subheader('シートの余白設定 (mm)')
    st.write('各シートの上下左右の余白をミリメートルで指定します。')
    col_margin1, col_margin2 = st.columns(2)
    with col_margin1:
        margin_top_mm = st.number_input('上余白 (mm)', min_value=0.0, value=10.0, step=1.0)
        margin_bottom_mm = st.number_input('下余白 (mm)', min_value=0.0, value=10.0, step=1.0)
    with col_margin2:
        margin_left_mm = st.number_input('左余白 (mm)', min_value=0.0, value=10.0, step=1.0)
        margin_right_mm = st.number_input('右余白 (mm)', min_value=0.0, value=10.0, step=1.0)


# メインコンテンツエリア
if uploaded_file is not None:
    image_bytes = uploaded_file.read()
    original_image = Image.open(io.BytesIO(image_bytes))

    st.subheader('元画像')
    st.image(original_image, caption='アップロードされた元画像', use_column_width=True)

    st.markdown('---')
    st.header('モザイクアート生成')

    if st.button('モザイクアートを生成', type="primary"):
        if original_image and mosaics_per_sheet_horizontal_input > 0 and mosaics_per_sheet_vertical_input > 0:
            # ここで全体のモザイク総数を計算
            total_horizontal_mosaics = mosaics_per_sheet_horizontal_input * num_sheets_horizontal
            total_vertical_mosaics = mosaics_per_sheet_vertical_input * num_sheets_vertical

            # session_stateに全体のモザイク総数を保存
            st.session_state.total_horizontal_mosaics = total_horizontal_mosaics
            st.session_state.total_vertical_mosaics = total_vertical_mosaics

            with st.spinner('全体モザイクアートを生成中...'):
                full_preview_image, full_placement_data = generate_mosaic_art(
                    original_image,
                    total_horizontal_mosaics, # 計算された全体のモザイク総数を渡す
                    total_vertical_mosaics,   # 計算された全体のモザイク総数を渡す
                    st.session_state['sticker_colors_data']
                )

                if full_preview_image and full_placement_data:
                    st.success('全体モザイクアート生成完了！')
                    st.subheader('全体のモザイクアート プレビュー')
                    st.image(full_preview_image, caption='全体のモザイクアート プレビュー', use_column_width=True)
                    st.info(f"全体のモザイク総数: 横 {total_horizontal_mosaics} 個 x 縦 {total_vertical_mosaics} 個")

                    df_full_placement = pd.DataFrame(full_placement_data[1:], columns=full_placement_data[0])
                    csv_buffer_full = io.StringIO()
                    df_full_placement.to_csv(csv_buffer_full, index=False, encoding='utf-8')
                    st.download_button(
                        label="全体の配置計画をCSVでダウンロード",
                        data=csv_buffer_full.getvalue(),
                        file_name="mosaic_placement_plan_full.csv",
                        mime="text/csv",
                    )

                    st.markdown('---')
                    st.header('シート分割されたモザイクアート (各マス目に情報記載)')

                    with st.spinner('シートを分割し、情報記載中...'):
                        sheet_results = split_mosaic_into_sheets(
                            full_preview_image,
                            full_placement_data,
                            num_sheets_horizontal,
                            num_sheets_vertical,
                            sheet_width_mm,
                            sheet_height_mm,
                            target_dpi,
                            margin_top_mm,
                            margin_bottom_mm,
                            margin_left_mm,
                            margin_right_mm
                        )

                    if sheet_results:
                        st.success(f'{len(sheet_results)}枚のシートに分割しました！')
                        st.info(f"各シートのピクセルサイズ: {int((sheet_width_mm / MM_PER_INCH) * target_dpi)}px x {int((sheet_height_mm / MM_PER_INCH) * target_dpi)}px (DPI: {target_dpi})")
                        st.info(f"各シート内のモザイク描画可能領域: {int(((sheet_width_mm - margin_left_mm - margin_right_mm) / MM_PER_INCH) * target_dpi)}px x {int(((sheet_height_mm - margin_top_mm - margin_bottom_mm) / MM_PER_INCH) * target_dpi)}px")
                        st.info(f"各モザイクマス目のピクセルサイズ: 約{sheet_results[0][0].width / (total_horizontal_mosaics // num_sheets_horizontal)}px x 約{sheet_results[0][0].height / (total_vertical_mosaics // num_sheets_vertical)}px")

                        zip_buffer = io.BytesIO()
                        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zf:
                            for sheet_image, sheet_placement_data, sheet_num in sheet_results:
                                img_byte_arr = io.BytesIO()
                                sheet_image.save(img_byte_arr, format='PNG')
                                zf.writestr(f'sheet_{sheet_num:02d}_preview_labeled.png', img_byte_arr.getvalue())

                                df_sheet_placement = pd.DataFrame(sheet_placement_data[1:], columns=sheet_placement_data[0])
                                csv_buffer_sheet = io.StringIO()
                                df_sheet_placement.to_csv(csv_buffer_sheet, index=False, encoding='utf-8')
                                zf.writestr(f'sheet_{sheet_num:02d}_placement_labeled.csv', csv_buffer_sheet.getvalue())

                                with st.expander(f"シート {sheet_num} (情報記載あり)"):
                                    st.image(sheet_image, caption=f'シート {sheet_num} プレビュー (情報記載あり)', use_column_width=True)
                                    st.dataframe(df_sheet_placement)

                                    st.download_button(
                                        label=f"シート {sheet_num} (情報記載あり) の配置計画をCSVでダウンロード",
                                        data=csv_buffer_sheet.getvalue(),
                                        file_name=f"sheet_{sheet_num:02d}_placement_labeled.csv",
                                        mime="text/csv",
                                    )

                        st.download_button(
                            label="全シート (情報記載あり) の画像と計画をZIPでダウンロード",
                            data=zip_buffer.getvalue(),
                            file_name="mosaic_art_sheets_labeled.zip",
                            mime="application/zip",
                        )

                    else:
                        st.error("シートの分割に失敗しました。シート分割設定を確認してください。")
                else:
                    st.error("モザイクアートの生成に失敗しました。設定を確認してください。")
        else:
            st.warning("画像をアップロードし、すべての設定を入力してください。")
else:
    st.info("左側のサイドバーから画像をアップロードし、設定を行ってください。")

st.markdown('---')
st.caption('© 2025 モザイクアート計画ツール')